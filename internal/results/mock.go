// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/results/interface.go

// Package results is a generated GoMock package.
package results

import (
	context "context"
	reflect "reflect"
	"time"

	gomock "github.com/golang/mock/gomock"
)

// MockCommon is a mock of Common interface.
type MockCommon struct {
	ctrl     *gomock.Controller
	recorder *MockCommonMockRecorder
}

// MockCommonMockRecorder is the mock recorder for MockCommon.
type MockCommonMockRecorder struct {
	mock *MockCommon
}

// NewMockCommon creates a new mock instance.
func NewMockCommon(ctrl *gomock.Controller) *MockCommon {
	mock := &MockCommon{ctrl: ctrl}
	mock.recorder = &MockCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommon) EXPECT() *MockCommonMockRecorder {
	return m.recorder
}

// CreatePartition mocks base method.
func (m *MockCommon) CreatePartition(ctx context.Context, partitionName, tableName, start, end string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartition", ctx, partitionName, tableName, start, end)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePartition indicates an expected call of CreatePartition.
func (mr *MockCommonMockRecorder) CreatePartition(ctx, partitionName, tableName, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartition", reflect.TypeOf((*MockCommon)(nil).CreatePartition), ctx, partitionName, tableName, start, end)
}

// Insert mocks base method.
func (m *MockCommon) Insert(ctx context.Context, tableNameResult string, objs []DeviceTestingResults, t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, tableNameResult, objs, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockCommonMockRecorder) Insert(ctx, tableNameResult, objs, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCommon)(nil).Insert), ctx, tableNameResult, objs, t)
}

// IsPartitionExist mocks base method.
func (m *MockCommon) IsPartitionExist(ctx context.Context, partitionName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPartitionExist", ctx, partitionName)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsPartitionExist indicates an expected call of IsPartitionExist.
func (mr *MockCommonMockRecorder) IsPartitionExist(ctx, partitionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPartitionExist", reflect.TypeOf((*MockCommon)(nil).IsPartitionExist), ctx, partitionName)
}
